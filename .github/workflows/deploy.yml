name: Deploy CollabBoard
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run Cypress E2E tests
        working-directory: ./frontend
        run: npx cypress run --browser chrome --headless

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          description: 'Deploying CollabBoard v${{ github.sha }}'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend && npm install
          cd ../frontend && npm install && npm run build

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          # For example: rsync, scp, docker push, etc.
          
      - name: Update Deployment Status (Success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          environment-url: ${{ secrets.DEPLOYMENT_URL }}
          description: 'Deployment completed successfully'

      - name: Update Deployment Status (Failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          description: 'Deployment failed'